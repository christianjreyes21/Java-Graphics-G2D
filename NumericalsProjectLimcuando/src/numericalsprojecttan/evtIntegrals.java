
package numericalsprojecttan;

import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.ArrayList;
import org.matheclipse.core.eval.ExprEvaluator;
import org.matheclipse.core.interfaces.IExpr;
import static org.matheclipse.core.expression.F.*;

import org.matheclipse.core.basic.Config;
import org.matheclipse.core.eval.EvalUtilities;
import org.matheclipse.core.eval.ExprEvaluator;
import org.matheclipse.core.interfaces.IAST;
import org.matheclipse.core.interfaces.IExpr;
import org.matheclipse.parser.client.SyntaxError;
import org.matheclipse.parser.client.math.MathException;

public class evtIntegrals extends javax.swing.JFrame {

    boolean negativeFlag = false;

    /**
     * Creates new form NewJFrame
     */
    public evtIntegrals() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        functionName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        x1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        x2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        derived = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        answer = new javax.swing.JLabel();
        derived3 = new javax.swing.JTextField();
        derived2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EVT for Integrals (Limcuando, Fermin) 2017");

        jLabel1.setText("f(x):");

        jLabel2.setText("x:");

        jLabel3.setText("[");

        x1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                x1ActionPerformed(evt);
            }
        });

        jLabel4.setText(",");

        x2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                x2ActionPerformed(evt);
            }
        });

        jLabel5.setText("]");

        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setText("Y:");

        answer.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        answer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(x1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(x2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(functionName, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jButton1)
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(derived)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(derived2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(derived3, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(answer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(functionName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(x1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(x2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(derived, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(answer, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(derived2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(derived3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void x1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_x1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_x1ActionPerformed

    private void x2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_x2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_x2ActionPerformed
    public Double SolvePolynomial(String f, double numValue) {
        ArrayList Solve = new ArrayList();
        ArrayList FirstTermSD = new ArrayList();
        ArrayList YValues = new ArrayList();
        ArrayList signListAA = new ArrayList();
        ArrayList operationTable = new ArrayList();
        String operation = "";

        Polynomial finalp = new Polynomial(0, 0);
        DecimalFormat df = new DecimalFormat("#.####"); //set to 5 decimal places
        df.setRoundingMode(RoundingMode.HALF_UP); //If 5 and above, tataas
        int startCount = 0;
        int adder = 0;
        String newFunc = f.trim(); //inalis yung spaces
        newFunc = newFunc.replace(" ", "");
        MainLoop:
        for (int i = 0; i < newFunc.length(); i++) {

            if (newFunc.charAt(i) == 'e') { //if e    
                i += 1;
                if (newFunc.charAt(i) == '^') { //pag may exponent yung e, e^(...)
                    String createStr = newFunc.substring(i + 1, newFunc.length());
                    int startIndex = createStr.indexOf("("); //kinukuha yung index nung (
                    int endIndex = createStr.indexOf(")");
                    String newStr = createStr.substring(startIndex + 1, endIndex); //kinukuha yung nasa loob ng '(' ')'
                    String[] PolyTerms = newStr.split("\\+|-"); //Iniisplit per term

                    int counter = 0;
                    for (int x = 0; x < newStr.length(); x++) { //Iterate yung buong string para malaman yung mga operations
                        if (x == 0) {
                            if (newStr.charAt(x) == '-') {
                                char sign = '-';
                                negativeFlag = true;
                                signListAA.add(counter, sign); //yung lahat ng .add inaadd lang nya sa arraylist, yung una yung index tapos yung pangalawa, any object
                                counter++;

                            }
                        } else {
                            if (newStr.charAt(x) == '-') {
                                char sign = '-';
                                signListAA.add(counter, sign);
                                counter++;
                            } else {
                                if (newStr.charAt(x) == '+') {
                                    char sign = '+';
                                    signListAA.add(counter, sign);
                                    counter++;
                                } else if (newStr.charAt(x) == '-') {
                                    char sign = '-';
                                    signListAA.add(counter, sign);
                                    counter++;

                                }
                            }
                        }
                    }
                    Polynomial poly = null;
                    for (int d = 0; d < PolyTerms.length; d++) { //eto na yung sa terms sa exponent
                        String[] numVal = PolyTerms[d].split("x");
                        String[] expVal = PolyTerms[d].split("\\^");
                        //   System.out.println(expVal[0]);
                        try {
                            int test = Integer.parseInt(expVal[0].trim()); //ittest kung yung given ba ay may variable or wala

                            poly = new Polynomial(Integer.parseInt(numVal[0].trim()), 0);

                            FirstTermSD.add(d, poly);
                        } catch (Exception v) { //pag may variable, mageexception
                            try { //ittest naman kung x^2 lang or like that
                                poly = new Polynomial(Integer.parseInt(numVal[0].trim()), Integer.parseInt(expVal[1].trim()));

                                FirstTermSD.add(d, poly);
                            } catch (Exception z) { //pag may x sa exponent
                                try {
                                    poly = new Polynomial(Integer.parseInt(numVal[0].trim()), 1);

                                    FirstTermSD.add(d, poly);
                                } catch (Exception z1) { //sinasalo dito lahat ng error kung meron man, kung -yung number o kung blanko lang
                                    if (negativeFlag == true) {
                                        negativeFlag = false;
                                        poly = new Polynomial(0, 0);

                                        FirstTermSD.add(d, poly);
                                    } else {
                                        poly = new Polynomial(1, 1);

                                        FirstTermSD.add(d, poly);
                                    }
                                }
                            }
                        }
                    }
                    Polynomial p = new Polynomial(0, 0);
                    Polynomial q = new Polynomial(0, 0);

                    int counterFirst = -1;
                    //pag compute na nung exponent
                    for (int x = 0; x < FirstTermSD.size(); x++) {
                        try {
                            if ((char) signListAA.get(counterFirst) == '+') {
                                p = p.plus((Polynomial) FirstTermSD.get(x));
                                counterFirst++;
                            } else if ((char) signListAA.get(counterFirst) == '-') {
                                p = p.minus((Polynomial) FirstTermSD.get(x));
                                counterFirst++;
                            }
                        } catch (Exception ex) {
                            p = p.plus((Polynomial) FirstTermSD.get(x));
                            counterFirst++;
                            //System.out.println(signListAA.get(counterFirst));
                        }

                    }

                    Double polyFunc1 = Math.pow(Math.E, Double.parseDouble(p.compose(new Polynomial(numValue, 0)).toString()));

                    //AFunction.add(index, polyFunc1);
                    //BFunction.add(index, polyFunc2);
                    Solve.add(adder, polyFunc1);
                    adder++;
                    i += endIndex + 1;
                    signListAA.clear();
                    p = new Polynomial(0, 0);
                    FirstTermSD.clear();
                } else {
                    Double polyFunc2 = Math.E;
                    Solve.add(adder, polyFunc2);
                    adder++;
                    signListAA.clear();

                    FirstTermSD.clear();
                }
                continue MainLoop;
            }
            //try {
            if (newFunc.charAt(i) == '+') {
                //    System.out.println("plus");
                operationTable.add(startCount, "plus");
                operation = "plus";
                startCount++;
                continue MainLoop;
            }//e^(
            if (newFunc.charAt(i) == '-') {
                //   System.out.println("minue");
                operationTable.add(startCount, "minus");
                operation = "minus";
                startCount++;
                continue MainLoop;
            }

            if (newFunc.charAt(i) == 'c') {
                String createStr = newFunc.substring(i + 3, newFunc.length());
                int startIndex = createStr.indexOf("(");
                int endIndex = createStr.indexOf(")");
                String newStr = newFunc.substring(i + 3 + startIndex + 1, i + 3 + endIndex);
                //   System.out.println(newStr);
                String[] PolyTerms = newStr.split("\\+|-");
                // System.out.println(PolyTerms[0] + " " + PolyTerms[1]);
                int counter = 0;
                for (int x = 0; x < newStr.length(); x++) {
                    if (x == 0) {
                        if (newStr.charAt(x) == '-') {
                            char sign = '-';
                            negativeFlag = true;
                            signListAA.add(counter, sign);
                            counter++;

                        }
                    } else {
                        if (newStr.charAt(x) == '-') {
                            char sign = '-';
                            signListAA.add(counter, sign);
                            counter++;
                        } else {
                            if (newStr.charAt(x) == '+') {
                                char sign = '+';
                                signListAA.add(counter, sign);
                                counter++;
                            } else if (newStr.charAt(x) == '-') {
                                char sign = '-';
                                signListAA.add(counter, sign);
                                counter++;

                            }
                        }
                    }
                }
                Polynomial poly = null;
                for (int d = 0; d < PolyTerms.length; d++) {
                    String[] numVal = PolyTerms[d].split("x");
                    String[] expVal = PolyTerms[d].split("\\^");
                    //   System.out.println(expVal[0]);
                    try {
                        int test = Integer.parseInt(expVal[0].trim());

                        poly = new Polynomial(Integer.parseInt(numVal[0].trim()), 0);

                        FirstTermSD.add(d, poly);
                    } catch (Exception v) {
                        try {
                            poly = new Polynomial(Integer.parseInt(numVal[0].trim()), Integer.parseInt(expVal[1].trim()));

                            FirstTermSD.add(d, poly);
                        } catch (Exception z) {
                            try {
                                poly = new Polynomial(Integer.parseInt(numVal[0].trim()), 1);

                                FirstTermSD.add(d, poly);
                            } catch (Exception z1) {
                                if (negativeFlag == true) {
                                    negativeFlag = false;
                                    poly = new Polynomial(0, 0);

                                    FirstTermSD.add(d, poly);
                                } else {
                                    poly = new Polynomial(1, 1);

                                    FirstTermSD.add(d, poly);
                                    //   System.out.println(z1);
                                }
                            }
                        }
                    }
                }
                Polynomial p = new Polynomial(0, 0);
                Polynomial q = new Polynomial(0, 0);

                int counterFirst = -1;
                int counterSecond = -1;
                for (int x = 0; x < FirstTermSD.size(); x++) {
                    try {
                        if ((char) signListAA.get(counterFirst) == '+') {
                            p = p.plus((Polynomial) FirstTermSD.get(x));
                            counterFirst++;
                        } else if ((char) signListAA.get(counterFirst) == '-') {
                            p = p.minus((Polynomial) FirstTermSD.get(x));
                            counterFirst++;
                        }
                    } catch (Exception ex) {
                        p = p.plus((Polynomial) FirstTermSD.get(x));
                        counterFirst++;
                    }

                }

                // System.out.println("P is:2 " + p);
                // System.out.println(p.compose((Polynomial) xValuesPoly.get(0)));
                Double polyFunc1 = Double.parseDouble(p.compose(new Polynomial(numValue, 0)).toString());
                //System.out.println();
                polyFunc1 = Math.cos(polyFunc1);

                Solve.add(adder, polyFunc1);
                signListAA.clear();
                p = new Polynomial(0, 0);
                FirstTermSD.clear();

                adder++;
                i = i + 3 + endIndex;
                continue;
            }
            if (newFunc.charAt(i) == 's') {
                String createStr = newFunc.substring(i + 3, newFunc.length());
                int startIndex = createStr.indexOf("(");
                int endIndex = createStr.indexOf(")");
                String newStr = newFunc.substring(i + 3 + startIndex + 1, i + 3 + endIndex);
                //   System.out.println(newStr);
                String[] PolyTerms = newStr.split("\\+|-");
                // System.out.println(PolyTerms[0] + " " + PolyTerms[1]);
                int counter = 0;
                for (int x = 0; x < newStr.length(); x++) {
                    if (x == 0) {
                        if (newStr.charAt(x) == '-') {
                            char sign = '-';
                            negativeFlag = true;
                            signListAA.add(counter, sign);
                            counter++;

                        }
                    } else {
                        if (newStr.charAt(x) == '-') {
                            char sign = '-';
                            signListAA.add(counter, sign);
                            counter++;
                        } else {
                            if (newStr.charAt(x) == '+') {
                                char sign = '+';
                                signListAA.add(counter, sign);
                                counter++;
                            } else if (newStr.charAt(x) == '-') {
                                char sign = '-';
                                signListAA.add(counter, sign);
                                counter++;

                            }
                        }
                    }
                }
                Polynomial poly = null;
                for (int d = 0; d < PolyTerms.length; d++) {
                    String[] numVal = PolyTerms[d].split("x");
                    String[] expVal = PolyTerms[d].split("\\^");
                    //   System.out.println(expVal[0]);
                    try {
                        int test = Integer.parseInt(expVal[0].trim());

                        poly = new Polynomial(Integer.parseInt(numVal[0].trim()), 0);

                        FirstTermSD.add(d, poly);
                    } catch (Exception v) {
                        try {
                            poly = new Polynomial(Integer.parseInt(numVal[0].trim()), Integer.parseInt(expVal[1].trim()));

                            FirstTermSD.add(d, poly);
                        } catch (Exception z) {
                            try {
                                poly = new Polynomial(Integer.parseInt(numVal[0].trim()), 1);

                                FirstTermSD.add(d, poly);
                            } catch (Exception z1) {
                                if (negativeFlag == true) {
                                    negativeFlag = false;
                                    poly = new Polynomial(0, 0);

                                    FirstTermSD.add(d, poly);
                                } else {
                                    poly = new Polynomial(1, 1);

                                    FirstTermSD.add(d, poly);
                                    //   System.out.println(z1);
                                }
                            }
                        }
                    }
                }
                Polynomial p = new Polynomial(0, 0);
                Polynomial q = new Polynomial(0, 0);

                int counterFirst = -1;
                int counterSecond = -1;
                for (int x = 0; x < FirstTermSD.size(); x++) {
                    try {
                        if ((char) signListAA.get(counterFirst) == '+') {
                            p = p.plus((Polynomial) FirstTermSD.get(x));
                            counterFirst++;
                        } else if ((char) signListAA.get(counterFirst) == '-') {
                            p = p.minus((Polynomial) FirstTermSD.get(x));
                            counterFirst++;
                        }
                    } catch (Exception ex) {
                        p = p.plus((Polynomial) FirstTermSD.get(x));
                        counterFirst++;
                    }

                }

                // System.out.println("P is:2 " + p);
                // System.out.println(p.compose((Polynomial) xValuesPoly.get(0)));
                System.out.println(p);
                Double polyFunc1 = Double.parseDouble(p.compose(new Polynomial(numValue, 0)).toString());
                //System.out.println();
                System.out.println(polyFunc1);
                polyFunc1 = Math.sin(polyFunc1);
                System.out.println(polyFunc1);
                Solve.add(adder, polyFunc1);
                signListAA.clear();
                p = new Polynomial(0, 0);
                FirstTermSD.clear();

                adder++;
                i = i + 3 + endIndex;
                continue MainLoop;
            } else {
                System.out.println(newFunc.charAt(i));
                String CreatedString = newFunc.substring(i, newFunc.length());
                //   System.out.println(i + " "+CreatedString);
                System.out.println(CreatedString);
                i += f.length();
                String[] PolyTerms = CreatedString.split("\\+|-");
                // System.out.println(PolyTerms[0] + " " + PolyTerms[1]);
                int counter = 0;
                for (int x = 0; x < CreatedString.length(); x++) {
                    if (x == 0) {
                        if (CreatedString.charAt(x) == '-') {
                            char sign = '-';
                            negativeFlag = true;
                            signListAA.add(counter, sign);
                            counter++;

                        }
                    } else {
                        if (CreatedString.charAt(x) == '-') {
                            char sign = '-';
                            signListAA.add(counter, sign);
                            counter++;
                        } else {
                            if (CreatedString.charAt(x) == '+') {
                                char sign = '+';
                                signListAA.add(counter, sign);
                                counter++;
                            } else if (CreatedString.charAt(x) == '-') {
                                char sign = '-';
                                signListAA.add(counter, sign);
                                counter++;

                            }
                        }
                    }
                }
                Polynomial poly = null;
                for (int d = 0; d < PolyTerms.length; d++) {
                    String[] numVal = PolyTerms[d].split("x");
                    String[] expVal = PolyTerms[d].split("\\^");

                    //   System.out.println(expVal[0]);
                    try {
                        int test = Integer.parseInt(expVal[0].trim());
                        poly = new Polynomial(Integer.parseInt(numVal[0].trim()), 0);
                        FirstTermSD.add(d, poly);
                    } catch (Exception v) {
                        try {

                            poly = new Polynomial(Integer.parseInt(numVal[0].trim()), Integer.parseInt(expVal[1].trim()));

                            FirstTermSD.add(d, poly);
                        } catch (ArrayIndexOutOfBoundsException z) {
                            try {

                                poly = new Polynomial(Integer.parseInt(numVal[0].trim()), 1);

                                FirstTermSD.add(d, poly);
                            } catch (Exception z1) {

                                if (negativeFlag == true) {
                                    negativeFlag = false;
                                    poly = new Polynomial(0, 0);

                                    FirstTermSD.add(d, poly);
                                } else {

                                    poly = new Polynomial(1, 1);

                                    FirstTermSD.add(d, poly);

//System.out.println(z1);
                                }
                            }
                        } catch (NumberFormatException xds) {
                            try {
                                poly = new Polynomial(1, Integer.parseInt(expVal[1].trim()));
                                FirstTermSD.add(d, poly);
                            } catch (Exception k) {
                                poly = new Polynomial(1, 1);
                                FirstTermSD.add(d, poly);
                            }
                        }
                    }
                }
                Polynomial p = new Polynomial(0, 0);
                Polynomial q = new Polynomial(0, 0);

                int counterFirst = -1;
                int counterSecond = -1;
                for (int x = 0; x < FirstTermSD.size(); x++) {
                    try {
                        if ((char) signListAA.get(counterFirst) == '+') {
                            p = p.plus((Polynomial) FirstTermSD.get(x));
                            counterFirst++;
                        } else if ((char) signListAA.get(counterFirst) == '-') {
                            p = p.minus((Polynomial) FirstTermSD.get(x));
                            counterFirst++;
                        }
                    } catch (Exception ex) {
                        p = p.plus((Polynomial) FirstTermSD.get(x));
                        counterFirst++;

                    }
                }
                //System.out.println("P is: " + p);
                //System.out.println(p.compose((Polynomial) xValuesPoly.get(0)));
                //System.out.println(p);
                Double polyFunc1 = Double.parseDouble(p.compose(new Polynomial(numValue, 0)).toString());
                //System.out.println(polyFunc1);

                Solve.add(adder, polyFunc1);
                signListAA.clear();
                p = new Polynomial(0, 0);
                FirstTermSD.clear();
                adder++;
            }
            // }// catch (Exception elephant) {
            //    System.out.println(elephant);
            //}
        }
        double number = 0;
        int counter2 = 0;
        try {
            for (int nums = 0; nums < Solve.size(); nums++) {
                number = number + (double) Solve.get(nums);

                nums++;
                if (operationTable.get(counter2) == "plus") {
                    number = number + (double) Solve.get(nums);
                    System.out.println(number);

                    counter2++;
                } else if (operationTable.get(counter2) == "minus") {
                    number = number - (double) Solve.get(nums);
                    counter2++;
                }

            }
        } catch (Exception DW) {
            //number = number + (double) Solve.get(0);
        }
        //System.out.println(number);

        //YValues.add(theXValues, df.format(number));
        Solve.clear();
        adder = 0;
        return number;
    }
    /*public Double equatePolys(Double x1, Polynomial x2){
    Double ans = 0.0;
    boolean sFlag = false;
    if(x1 < 0){
    sFlag = true;
    }
    if(sFlag = true){
    x2 = x2.plus(new Polynomial(x1,0));
    }
    else{
    x2 = x2.minus(new Polynomial(x1,0));
    }
    
    return ans;
    }*/
    public Polynomial convertToPolynomial(String functions) {

        Polynomial xxc = new Polynomial(0, 0);
        ArrayList Solve = new ArrayList();
        ArrayList FirstTermSD = new ArrayList();
        ArrayList YValues = new ArrayList();
        ArrayList signListAA = new ArrayList();
        ArrayList operationTable = new ArrayList();
        String[] PolyTerms = functions.split("\\+|-");
        //  System.out.println(PolyTerms[0] + " " + PolyTerms[1] + " " + PolyTerms[2]);
        int counter = 0;
        for (int x = 0; x < functions.length(); x++) {
            if (x == 0) {
                if (functions.charAt(x) == '-') {
                    char sign = '-';
                    negativeFlag = true;
                    signListAA.add(counter, sign);
                    counter++;

                }
            } else {
                if (functions.charAt(x) == '-') {
                    char sign = '-';
                    signListAA.add(counter, sign);
                    counter++;
                } else {
                    if (functions.charAt(x) == '+') {
                        char sign = '+';
                        signListAA.add(counter, sign);
                        counter++;
                    } else if (functions.charAt(x) == '-') {
                        char sign = '-';
                        signListAA.add(counter, sign);
                        counter++;

                    }
                }
            }
        }
        Polynomial poly = null;
        for (int d = 0; d < PolyTerms.length; d++) {
            String[] numVal = PolyTerms[d].split("x");
            String[] expVal = PolyTerms[d].split("\\^");

            //   System.out.println(expVal[0]);
            try {
                int test = (int) Double.parseDouble(expVal[0].trim());
                poly = new Polynomial(Double.parseDouble(numVal[0].trim()), 0);

                FirstTermSD.add(d, poly);
            } catch (Exception v) {
                try {

                    poly = new Polynomial(Double.parseDouble(numVal[0].trim()), (int) Double.parseDouble(expVal[1].trim()));

                    FirstTermSD.add(d, poly);
                } catch (ArrayIndexOutOfBoundsException z) {
                    try {
                        poly = new Polynomial(Double.parseDouble(numVal[0].trim()), 1);

                        FirstTermSD.add(d, poly);
                    } catch (Exception z1) {
                        if (negativeFlag == true) {
                            negativeFlag = false;
                            poly = new Polynomial(0, 0);

                            FirstTermSD.add(d, poly);
                        } else {
                            poly = new Polynomial(1, 1);

                            FirstTermSD.add(d, poly);
                            //System.out.println(z1);
                        }
                    }
                } catch (NumberFormatException xds) {
                    try {
                        if (negativeFlag == true) {
                            negativeFlag = false;
                            poly = new Polynomial(0, 0);

                            FirstTermSD.add(d, poly);
                        } else {
                            System.out.println(xds);
                            poly = new Polynomial(1, (int) Double.parseDouble(expVal[1].trim()));
                            FirstTermSD.add(d, poly);
                        }
                    } catch (Exception k) {
                        poly = new Polynomial(1, 1);
                        FirstTermSD.add(d, poly);
                    }
                }
            }
        }
        Polynomial p = new Polynomial(0, 0);
        Polynomial q = new Polynomial(0, 0);

        int counterFirst = -1;
        int counterSecond = -1;
        for (int x = 0; x < FirstTermSD.size(); x++) {
            try {
                if ((char) signListAA.get(counterFirst) == '+') {
                    p = p.plus((Polynomial) FirstTermSD.get(x));
                    counterFirst++;
                } else if ((char) signListAA.get(counterFirst) == '-') {
                    p = p.minus((Polynomial) FirstTermSD.get(x));
                    counterFirst++;
                }
            } catch (Exception ex) {
                p = p.plus((Polynomial) FirstTermSD.get(x));
                counterFirst++;

            }
        }

        xxc = p;
        //System.out.println("P is: " + p);
        //System.out.println(p.compose((Polynomial) xValuesPoly.get(0)));
        //System.out.println(p);
        //System.out.println(p);

        return xxc;

    }

    public String verifyString(String func) {
        String StrFormed = "";
        ArrayList Sign = new ArrayList();
        int adder = 0;
        for (int i = 0; i < func.length(); i++) {
            if (i == 0) { //if first letter
                if (func.charAt(0) == 's' || func.charAt(0) == 'e' || func.charAt(0) == 'c') {
                    //ignore
                } else if (func.charAt(0) == '-') {
                    Sign.add(0, func.charAt(0));
                    adder++;
                } else {
                    Sign.add(0, '+');
                    int nextSin = func.indexOf("s");
                    int nextE = func.indexOf("e");
                    int nextCos = func.indexOf("c");
                    if (nextSin > -1) {
                        String newst = func.substring(nextSin);
                        int Close = newst.indexOf(")");
                        if (func.charAt(nextSin - 1) == '-') {
                            StrFormed = "-" + func.substring(nextSin, Close + 3);
                            i = Close + 4;
                            StrFormed = StrFormed + func.substring(0, nextSin - 2);
                        } else {
                            StrFormed = func.substring(nextSin, Close + 3);
                            i = Close + 4;
                            StrFormed = StrFormed + func.substring(0, nextSin - 2);
                        }
                    }
                    if (nextE > -1) {
                        String newstrs = func.substring(nextE);
                        if (func.charAt(i + 1) == '^') {
                            int Close = newstrs.indexOf(")");
                            StrFormed = func.substring(nextSin, Close);
                            i = Close + 1;
                        } else {
                            i = i + 1;
                        }
                    }
                    if (nextCos > -1) {
                        String newst = func.substring(nextCos);
                        System.out.println(newst);
                        int Close = newst.indexOf(")");
                        System.out.println(Close + " index of )");

                        if (func.charAt(nextCos - 1) == '-') {
                            StrFormed = "-" + func.substring(nextCos, Close + 3);
                            i = Close + 4;
                            StrFormed = StrFormed + func.substring(0, nextCos - 2);
                        } else {

                            StrFormed = func.substring(nextCos, Close + 3);
                            i = Close + 4;

                            StrFormed = StrFormed + Sign.get(0) + func.substring(0, nextCos - 1);
                        }
                    }
                }
            } else {
                StrFormed = func;
            }
        }
        return StrFormed;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String function = functionName.getText();
        String correctedFunction = verifyString(function);
        String xNo1 = x1.getText();
        String xNo2 = x2.getText();
        Double X1 = Double.parseDouble(xNo1);
        Double X2 = Double.parseDouble(xNo2);
        Polynomial convertedPoly = convertToPolynomial(function);
        convertedPoly = convertedPoly.differentiate(); //eto na yung derived na equation
        Double Fof1 = SolvePolynomial(correctedFunction, X1);
        Double Fof2 = SolvePolynomial(correctedFunction, X2);
        System.out.println(convertedPoly.toString());
        
        
       
        //Main formula
        Double y = 0.0;
        Double topValue = Fof2 - Fof1;

        Double bottomValue = X2 - X1;

        y = 1 / (X2-X1);

        System.out.println(y);
        
        ExprEvaluator util = new ExprEvaluator();
        IExpr result = util.evaluate("Integrate("+ functionName.getText() +",x)");
        String integratedEquation=result.toString();
        
        
        //GET INTEGRATE RESULT (Y)
        result = util.evaluate("Integrate("+ functionName.getText() +",{x,"+X1+","+X2+"})");
        String integratedValue=result.toString();
        derived.setText(integratedEquation+"="+integratedValue);
        
        
        //IExpr result = util.evaluate("Solve(2x+4==78, x)");
        result = util.evaluate("Solve(x== "+y+"*("+integratedValue+"), x)");
        String secondResult = result.toString();
        String secondResult1 [] = secondResult.split(">|}");
        secondResult = secondResult1[1];
        System.out.println(secondResult);
        derived2.setText(secondResult);
        
        //String subEquation = function.replace("x", secondResult);
        result = util.evaluate("Solve("+ function +"== "+secondResult+",x)");
        String finalResult = result.toString();
        //String finalResult1 [] = finalResult.split(">|}");
        //finalResult = finalResult1[1];
        derived3.setText(finalResult);
        System.out.println(finalResult);
        
        
        //ieequate mo nalang yung y pati yung convertePoly, find x mo nalang. Mahirap to sa mga e pati sa mga cos pati sin, pwede siguro imamanual pa.
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(evtIntegrals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(evtIntegrals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(evtIntegrals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(evtIntegrals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new evtIntegrals().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel answer;
    private javax.swing.JTextField derived;
    private javax.swing.JTextField derived2;
    private javax.swing.JTextField derived3;
    private javax.swing.JTextField functionName;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField x1;
    private javax.swing.JTextField x2;
    // End of variables declaration//GEN-END:variables
}

class Polynomial {

    private double[] coef;  // coefficients
    private int deg;     // degree of polynomial (0 for the zero polynomial)
    // a * x^b

    public Polynomial(double a, int b) {
        coef = new double[b + 1];
        coef[b] = a;
        deg = degree();
    }

    // return the degree of this polynomial (0 for the zero polynomial)
    public int degree() {
        int d = 0;
        for (int i = 0; i < coef.length; i++) {
            if (coef[i] != 0) {
                d = i;
            }
        }
        return d;
    }

    // return c = a + b
    public Polynomial plus(Polynomial b) {
        Polynomial a = this;
        Polynomial c = new Polynomial(0, Math.max(a.deg, b.deg));
        for (int i = 0; i <= a.deg; i++) {
            c.coef[i] += a.coef[i];
        }
        for (int i = 0; i <= b.deg; i++) {
            c.coef[i] += b.coef[i];
        }
        c.deg = c.degree();
        return c;
    }

    // return (a - b)
    public Polynomial minus(Polynomial b) {
        Polynomial a = this;
        Polynomial c = new Polynomial(0, Math.max(a.deg, b.deg));
        for (int i = 0; i <= a.deg; i++) {
            c.coef[i] += a.coef[i];
        }
        for (int i = 0; i <= b.deg; i++) {
            c.coef[i] -= b.coef[i];
        }
        c.deg = c.degree();
        return c;
    }

    // return (a * b)
    public Polynomial times(Polynomial b) {
        Polynomial a = this;
        Polynomial c = new Polynomial(0, a.deg + b.deg);
        for (int i = 0; i <= a.deg; i++) {
            for (int j = 0; j <= b.deg; j++) {
                c.coef[i + j] += (a.coef[i] * b.coef[j]);
            }
        }
        c.deg = c.degree();
        return c;
    }

    public Polynomial divide(Polynomial b) {
        Polynomial a = this;
        Polynomial c = new Polynomial(0, a.deg + b.deg);
        for (int i = 0; i <= a.deg; i++) {
            for (int j = 0; j <= b.deg; j++) {
                c.coef[i + j] += (a.coef[i] / b.coef[j]);

            }
        }
        c.deg = c.degree();
        return c;
    }

    // return a(b(x))  - compute using Horner's method
    public Polynomial compose(Polynomial b) {
        Polynomial a = this;
        Polynomial c = new Polynomial(0, 0);
        for (int i = a.deg; i >= 0; i--) {
            Polynomial term = new Polynomial(a.coef[i], 0);
            c = term.plus(b.times(c));
        }
        return c;
    }

    // do a and b represent the same polynomial?
    public boolean eq(Polynomial b) {
        Polynomial a = this;
        if (a.deg != b.deg) {
            return false;
        }
        for (int i = a.deg; i >= 0; i--) {
            if (a.coef[i] != b.coef[i]) {
                return false;
            }
        }
        return true;
    }

    // use Horner's method to compute and return the polynomial evaluated at x
    public double evaluate(int x) {
        double p = 0;
        for (int i = deg; i >= 0; i--) {
            p = coef[i] + (x * p);
        }
        return p;
    }

    // differentiate this polynomial and return it
    public Polynomial differentiate() {
        if (deg == 0) {
            return new Polynomial(0, 0);
        }
        Polynomial deriv = new Polynomial(0, deg - 1);
        deriv.deg = deg - 1;
        for (int i = 0; i < deg; i++) {
            deriv.coef[i] = (i + 1) * coef[i + 1];
        }
        return deriv;
    }

    // convert to string representation
    public String toString() {
        if (deg == 0) {
            return "" + coef[0];
        }
        if (deg == 1) {
            return coef[1] + "x + " + coef[0];
        }
        String s = coef[deg] + "x^" + deg;
        for (int i = deg - 1; i >= 0; i--) {
            if (coef[i] == 0) {
                continue;
            } else if (coef[i] > 0) {
                s = s + " + " + (coef[i]);
            } else if (coef[i] < 0) {
                s = s + " - " + (-coef[i]);
            }
            if (i == 1) {
                s = s + "x";
            } else if (i > 1) {
                s = s + "x^" + i;
            }
        }
        return s;
    }
}
