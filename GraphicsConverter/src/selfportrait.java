/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Arrays;

/**
 *
 * @author Patrick
 */
public class selfportrait extends javax.swing.JFrame {

    /**
     * Creates new form selfportrait
     */
    float xValueSt = 0;
    float yValueSt = 0;
    float xValueTemp = 0;
    float yValueTemp = 0;
    

    public selfportrait() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PointsInput = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PointsOutput = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PointsInput.setColumns(20);
        PointsInput.setRows(5);
        jScrollPane1.setViewportView(PointsInput);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PointsOutput.setColumns(20);
        PointsOutput.setRows(5);
        jScrollPane2.setViewportView(PointsOutput);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jButton1.setText("Convert To Code");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(338, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(315, 315, 315))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String draw = "";
        String FullInput = PointsInput.getText();
        
        String[] PickedInput = FullInput.split("/>");
        
        for (int i = 0; i < PickedInput.length; i++) {
            if(PickedInput[i].indexOf("path")>0)
            {
            String[] Sliced = PickedInput[i].split(" ");
            String[] colorSlice = Sliced[3].split("\"");
            draw += "g2d.setPaint(" + hex2Rgb(colorSlice[1]) + "\n";
            draw += "GeneralPath gp" + i + " = new GeneralPath();\n";

            //System.out.println(colorSlice[1]);
            Sliced[4] = Sliced[4].replace("-", ",-");
            String[] stringSlice = Sliced[4].split("\"");
            //System.out.println(Sliced[4]);
            String[] PointsSliced = stringSlice[1].split("c|C|l|s|L|v|V|h|H");
            for (int x = 0; x < PointsSliced.length; x++) {

                if (PointsSliced[x].charAt(0) == 'M') {
                    System.out.println("M");
                    String points = PointsSliced[x].substring(1);
                    if (points.charAt(0) == ',') {
                        points = points.substring(2);
                    }
                    String[] pointSplit = points.split(",");
                    System.out.println(Arrays.deepToString(pointSplit));
                    xValueSt = Float.parseFloat(pointSplit[0]);
                    yValueSt = Float.parseFloat(pointSplit[1]);
                    draw += "gp" + i + ".moveTo(" + xValueSt + "," + yValueSt + ");\n";

                } else {

                    String points = PointsSliced[x];
                    if (PointsSliced[x].charAt(0) == ',') {
                        points = points.substring(1);
                    }
                    String[] pointSplit = points.split(",");
                    if (pointSplit.length == 6) {
                        if (x == PointsSliced.length - 1) {
                            System.out.println("C");
                            pointSplit[5] = pointSplit[5].replace("z", "");
                            draw += "gp" + i + ".curveTo(";

                            for (int z = 0; z < 5; z++) {

                                xValueTemp = Float.parseFloat(pointSplit[z]);
                                z++;
                                yValueTemp = Float.parseFloat(pointSplit[z]);
                                if (z == 5) {
                                    draw += xValueTemp + "," + yValueTemp + ");\n";
                                    xValueSt=xValueTemp;
                                    yValueSt=yValueTemp;
                                } else {
                                    draw += xValueTemp + "," + yValueTemp + ",";
                                    
                                }
                            }
                        } else {
                            System.out.println("c");

                            //System.out.println(Arrays.deepToString(pointSplit));
                            draw += "gp" + i + ".curveTo(";
                            for (int z = 0; z < 5; z++) {
                                xValueTemp = xValueSt + Float.parseFloat(pointSplit[z]);
                                z++;
                                yValueTemp = yValueSt + Float.parseFloat(pointSplit[z]);
                                if (z == 5) {
                                    draw += xValueTemp + "," + yValueTemp + ");\n";
                                    xValueSt=xValueTemp;
                                    yValueSt=yValueTemp;
                                } else {
                                    draw += xValueTemp + "," + yValueTemp + ",";
                                }
                            }
                        }
                    }
                    
                    else if (pointSplit.length == 4)
                    {
                        
                    }
                    
                    else if (pointSplit.length == 2)
                    {
                        
                    }
                    
                    else 
                    {
                        
                    }
                }

            }
            draw += "g2d.fill(gp" + i + ");\n";
            draw += "g2d.draw(gp" + i + ");\n";
            // String[] colorSlice = Sliced[2].split("\"");
            // String[] split
        }
        }
        PointsOutput.setText(draw);

    }//GEN-LAST:event_jButton1ActionPerformed
    public static String hex2Rgb(String colorStr) {

        return ("new Color(" + Integer.valueOf(colorStr.substring(1, 3), 16)
                + "," + Integer.valueOf(colorStr.substring(3, 5), 16)
                + "," + Integer.valueOf(colorStr.substring(5, 7), 16) + " ));");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(selfportrait.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(selfportrait.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(selfportrait.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(selfportrait.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new selfportrait().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea PointsInput;
    private javax.swing.JTextArea PointsOutput;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
